plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // 1. Querydsl 라이브러리 추가 (compileOnly 또는 implementation)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // Spring Boot 3.x/Jakarta 기준
    // 2. Annotation Processor (Q-클래스 생성기)
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    // 3. Querydsl Q-Class 생성을 위한 Annotation Processor 설정
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

	compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 3. Q-클래스 생성 경로 설정 (선택 사항, 보통 build/generated/querydsl에 생성됨)
sourceSets {
    main {
        java {
            srcDirs += ['build/generated/querydsl']
        }
    }
}
// 4. 컴파일 시 Querydsl 빌드 타겟 설정
tasks.named('compileJava') {
    dependsOn tasks.named('processResources')
}

tasks.named('test') {
	useJUnitPlatform()
}
